#!/bin/bash
#
# Load before nm, vcached, and vservers
# chkconfig: 3 60 80
# description: Update slice images
#
# Mark Huang <mlhuang@cs.princeton.edu>
# Copyright (C) 2004 The Trustees of Princeton University
#

# Source function library.
. /etc/init.d/functions

case "$1" in
    start|restart|reload)
	;;
    force)
	FORCE=true;;
    stop|status)
	exit 0
	;;
    *)
	echo $"Usage: $0 {start|stop|restart|reload|status|force}"
	exit 1
	;;
esac

# VServer definitions
init_paths="/usr/lib64/util-vserver/util-vserver-vars /usr/lib/util-vserver/util-vserver-vars"
for init_path in $init_paths ; do
    [ -f $init_path ] && { source $init_path ; break; }
done
[ "$PACKAGE_NAME" = "util-vserver" ] || echo "WARNING: could not find util-vserver init file among $init_paths"

# Save stdout and stderr
exec 3>&1
exec 4>&2

# Redirect stdout and stderr to a log file
exec >>/var/log/vserver-sliceimage
exec 2>&1

echo "--- STARTING $(date) ---"  >&3 2>&4

# Parse PLC configuration
if [ -r /etc/planetlab/plc_config ] ; then
    . /etc/planetlab/plc_config
else
    PLC_NAME="PlanetLab"
    PLC_SLICE_PREFIX="pl"
    PLC_BOOT_HOST="boot.planet-lab.org"
fi

shopt -s nullglob

# Make sure the barrier bit is set
chmod 0000 "$__DEFAULT_VSERVERDIR"
setattr --barrier "$__DEFAULT_VSERVERDIR"

# Set the attribute to unlink so vclone does the right thing wrt to 
# conserving space by linking and not copying unified files.

if [ -f /proc/virtual/info ] ; then
    x=$[ 16#`awk '/^VCIKernel:/ { print $2 }' /proc/virtual/info` ]; 
    y=$[ (x >> 9) & 1]
    if test "$y" = 1 ; then 
        # COW support
	find "$__DEFAULT_VSERVERDIR/.vref"/* -type f -print0 | xargs -0 setattr --iunlink
    else 
        # no COW; 
	find "$__DEFAULT_VSERVERDIR/.vref"/* -type f -print0 | xargs -0 setattr --~iunlink
    fi
fi


# Build reference images for system slices
# xxx if several instances of systemslices get installed, only one gets instanciated
for clonedstamp in "$__DEFAULT_VSERVERDIR/.vstub/"*/*.cloned ; do
    # e.g. NAME=planetflow
    NAME=$(basename $clonedstamp .cloned)
    DIR=$(dirname $clonedstamp)
    # e.g. SLICEFAMILY=planetlab-f8-i386
    SLICEFAMILY=$(cat $clonedstamp)
    # deduce the actual name used in .vref by replacing the first part of slice-family 
    # (pldistro) with the slice name
    # e.g. VREFNAME=planetflow-f8-i386
    VREFNAME=$(echo $SLICEFAMILY | sed -e "s,^[^-]*-,$NAME-,")

    VREFPATH="$__DEFAULT_VSERVERDIR/.vref/$VREFNAME"
    
    # do not redo existing vref's unless force is mentioned
    [ -z "$FORCE" -a -d "$VREFPATH" ] && continue
    [ -z "$FORCE" ] && message=Building
    [ -n "$FORCE" ] && message=Force-building
    
    # Copy base reference image
    echo -n $"$message slice image for $NAME in $VREFNAME: " >&3 2>&4

    # Build in temporary directory
    mkdir -p "$__DEFAULT_VSERVERDIR/.vtmp"
    TMP=$(mktemp -d "$__DEFAULT_VSERVERDIR/.vtmp/$NAME.XXXXXX")
    mkdir -p "$__DEFAULT_VSERVERDIR/.vref"

    # build the systemslice from the one it was originally cloned from
    FAMILYREF="$__DEFAULT_VSERVERDIR/.vref/$SLICEFAMILY"
    if [ -d "$FAMILYREF" ] ; then
	"$_VCLONE" "$FAMILYREF"/ "$TMP"/
	RETVAL=$?
    else
	RETVAL=1
    fi

    # merge the stub with the reference to get the system slice
    if [ $RETVAL -eq 0 ] ; then
	(cd "$DIR/$NAME"/ && find . | cpio -m -d -u -p "$TMP"/)
	RETVAL=$?
    fi

    # Clean RPM state
    rm -f "$TMP/var/lib/rpm/__db"*

    # Move it to its permanent location when complete
    if [ $RETVAL -eq 0 ] ; then
	# if in force mode, cleanup 
	[ -d "$VREFPATH" ] && rm -rf "$VREFPATH"
	mv "$TMP" "$VREFPATH"
	success >&3 2>&4
    else
	rm -rf "$TMP"
	failure >&3 2>&4
    fi
    echo >&3 2>&4
done

echo -n $"Updating slice images: " >&3 2>&4

VROOTS="$__DEFAULT_VSERVERDIR/.vref/* $__DEFAULT_VSERVERDIR/.vcache/* $__DEFAULT_VSERVERDIR/${PLC_SLICE_PREFIX}_*"

# Copy configuration files from host to slices
for file in /etc/hosts /etc/resolv.conf /etc/planetlab/node_id \
            /etc/planetlab/plc_config* /etc/planetlab/php/* \
            /etc/pki/rpm-gpg/* ; do
    if [ -r $file ] ; then
	for vroot in $VROOTS ; do
	    [ -d $vroot ] && install -D -m 644 $file $vroot/$file
	done
    fi
done


for vroot in $VROOTS ; do
    # NOTE: without this step, the 'rpm --allmatches' step can hang on boot
    # Remove stale RPM locks from all VROOT dirs
    [ -d $vroot ] && rm -f $vroot/var/lib/rpm/__db*
done

# (Re)install GPG signing keys
if [ -d /etc/pki/rpm-gpg ] ; then
    for vroot in $VROOTS ; do
	if [ -d $vroot ] ; then
	    chroot $vroot rpm --allmatches -e gpg-pubkey || :
	    chroot $vroot rpm --import /etc/pki/rpm-gpg/* || :
	fi
    done
fi

# Old versions of the Boot Manager copied portions of the Boot CD to
# /mnt/cdrom/bootme, to support old scripts which assumed that the
# Boot CD was mounted even in production mode. Now, it just copies it
# to /usr/boot/cacert.pem. In any case, copy the boot server
# certificate to the place(s) where BootServerRequest expects to find
# it (/usr/boot/cacert.pem by default, /mnt/cdrom/bootme in old
# versions).
CACERT="/usr/boot/cacert.pem /mnt/cdrom/bootme/cacert/$PLC_BOOT_HOST/cacert.pem"
for cacert in $CACERT ; do
    if [ -r $cacert ] ; then
	for vroot in $VROOTS ; do
	    if [ -d $vroot ] ; then
		# Install boot server certificate
		install -D -m 644 $cacert $vroot/usr/boot/cacert.pem
		echo $PLC_BOOT_HOST > $vroot/usr/boot/boot_server

		# Also install in /mnt/cdrom/bootme for backward compatibility
		install -D -m 644 $cacert $vroot/mnt/cdrom/bootme/cacert/$PLC_BOOT_HOST/cacert.pem
		echo $PLC_BOOT_HOST > $vroot/mnt/cdrom/bootme/BOOTSERVER
	    fi
	done
	break
    fi
done

success >&3 2>&4
echo "--- DONE $(date) ---"  >&3 2>&4
echo >&3 2>&4

exit 0
